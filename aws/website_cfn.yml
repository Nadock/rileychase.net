AWSTemplateFormatVersion: "2010-09-09"


Description: S3 storage and CloudFront distribution to host rileychase.net


Parameters:
  DomainName:
    Type: String
    Description: The domain name to use an alias to the website CloudFront Distribution
    Default: rileychase.net

  CertificateArn:
    Type: String
    Description: The ARN of the ACM Certificate to allow access via the DomainName


Resources:
  WebsiteBucket:
    Type: AWS::S3::Bucket
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            # W3045 â€” "Controlling access to an S3 bucket should be done with bucket policies"
            #
            # While this is probably better, some work to understand how to correctly
            # provision a bucket policy that has the same effect without breaking the
            # CloudFront access (among other things) is required.
            #
            # https://github.com/Nadock/rileychase.net/issues/242
            - W3045
    Properties:
      AccessControl: Private
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      BucketName: !Sub ${AWS::StackName}
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
      Tags:
        - Key: PROJECT
          Value: rileychase.net
        - Key: STAGE
          Value: production

  WebsiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebsiteBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: s3:GetObject
            Resource: !Sub arn:${AWS::Partition}:s3:::${WebsiteBucket}/*
            Principal:
              Service: cloudfront.amazonaws.com
            Condition:
              StringEquals:
                AWS:SourceArn: !Sub arn:${AWS::Partition}:cloudfront::${AWS::AccountId}:distribution/${WebsiteDistribution}
          - Effect: Allow
            Action: s3:ListBucket
            Resource: !Sub arn:${AWS::Partition}:s3:::${WebsiteBucket}
            Principal:
              Service: cloudfront.amazonaws.com
            Condition:
              StringEquals:
                AWS:SourceArn: !Sub arn:${AWS::Partition}:cloudfront::${AWS::AccountId}:distribution/${WebsiteDistribution}

  DistributionOAC:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Description: !Sub Origin access control for ${AWS::StackName}
        Name: !Sub ${AWS::StackName}-OAC
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  WebsiteDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
          - !Ref DomainName
          # This is not portable, if you're copying this you'll want to remove the
          # additional domains below.
          - rileychase.au
          - taylorchase.net
          - taylorchase.au
        Comment: !Ref AWS::StackName
        CustomErrorResponses:
          - ErrorCode: 400
            ResponseCode: 400
            ResponsePagePath: /errors/400/index.html
          - ErrorCode: 403
            ResponseCode: 403
            ResponsePagePath: /errors/403/index.html
          - ErrorCode: 404
            ResponseCode: 404
            ResponsePagePath: /errors/404/index.html
          - ErrorCode: 405
            ResponseCode: 405
            ResponsePagePath: /errors/405/index.html
          - ErrorCode: 414
            ResponseCode: 414
            ResponsePagePath: /errors/414/index.html
          - ErrorCode: 416
            ResponseCode: 416
            ResponsePagePath: /errors/416/index.html
          - ErrorCode: 500
            ResponseCode: 500
            ResponsePagePath: /errors/500/index.html
          - ErrorCode: 501
            ResponseCode: 501
            ResponsePagePath: /errors/501/index.html
          - ErrorCode: 502
            ResponseCode: 502
            ResponsePagePath: /errors/502/index.html
          - ErrorCode: 503
            ResponseCode: 503
            ResponsePagePath: /errors/503/index.html
          - ErrorCode: 504
            ResponseCode: 504
            ResponsePagePath: /errors/504/index.html
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6  # CachingOptimized
          Compress: true
          OriginRequestPolicyId: acba4595-bd28-49b8-b9fe-13317c0390fa  # UserAgentRefererHeaders
          ResponseHeadersPolicyId: !Ref DistributionResponseHeadersPolicy
          TargetOriginId: !Sub S3-${AWS::StackName}-WebsiteBucket
          ViewerProtocolPolicy: redirect-to-https
          FunctionAssociations:
            - EventType: viewer-request
              FunctionARN: !GetAtt IndexRedirectFunction.FunctionMetadata.FunctionARN
        DefaultRootObject: index.html
        Enabled: true
        HttpVersion: http2and3
        IPV6Enabled: true
        Logging:
          Bucket: !Sub ${WebsiteBucket}.s3.amazonaws.com
          Prefix: logs/
          IncludeCookies: false
        Origins:
          - DomainName: !GetAtt WebsiteBucket.RegionalDomainName
            Id: !Sub S3-${AWS::StackName}-WebsiteBucket
            OriginPath: /website
            OriginAccessControlId: !GetAtt DistributionOAC.Id
            S3OriginConfig:
              OriginAccessIdentity: ""
        ViewerCertificate:
          AcmCertificateArn: !Ref CertificateArn
          MinimumProtocolVersion: TLSv1.2_2021
          SslSupportMethod: sni-only
      Tags:
        - Key: PROJECT
          Value: rileychase.net
        - Key: STAGE
          Value: production

  DistributionResponseHeadersPolicy:
    Type: AWS::CloudFront::ResponseHeadersPolicy
    Properties:
      ResponseHeadersPolicyConfig:
        Name: !Sub ${AWS::StackName}-static-site-security-headers
        SecurityHeadersConfig:
          StrictTransportSecurity:
            AccessControlMaxAgeSec: 63072000
            IncludeSubdomains: true
            Override: true
            Preload: true
          ContentSecurityPolicy:
            ContentSecurityPolicy: "default-src 'self';"
            Override: true
          ContentTypeOptions:
            Override: true
          FrameOptions:
            FrameOption: DENY
            Override: true
          ReferrerPolicy:
            ReferrerPolicy: "same-origin"
            Override: true
          XSSProtection:
            ModeBlock: true
            Override: true
            Protection: true

  IndexRedirectFunction:
    Type: AWS::CloudFront::Function
    Properties:
      AutoPublish: true
      Name: !Sub ${AWS::StackName}-index-redirect-function
      FunctionConfig:
        Comment: !Ref AWS::StackName
        Runtime: cloudfront-js-2.0
      FunctionCode: |
        function handler(event) {
            var request = event.request;

            // Redirect users on alternate domains back to the primary domain
            var host = event.request.headers.host.value;
            if (host !== 'rileychase.net') {
              var location = 'https://rileychase.net'
              if (!request.uri.startsWith('/')) {
                location += '/'
              }
              location += request.uri

              return {
                statusCode: 302,
                statusDescription: 'Found',
                headers: { location: { value: location } }
              }
            }

            // Redirect users from deleted GIFs to their WEBP replacements
            if (request.uri.match(/\/img\/dj_howard\/.*\.gif/)) {
                return {
                statusCode: 303,
                statusDescription: 'Moved Permanently',
                headers: { location: { value: request.uri.replace(".gif", ".webp") } }
              }
            }

            var leaf = request.uri.split("/").pop();

            // Check whether the URI is missing a file name
            if (request.uri.endsWith('/')) {
              request.uri += 'index.html';
            }
            // Check whether the URI is missing a file extension
            else if (!leaf.includes('.')) {
              request.uri += '/index.html';
            }

            return request;
        }

  WebsiteDNS:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: !Sub ${DomainName}.
      RecordSets:
        - Name: !Ref DomainName
          Type: A
          AliasTarget:
            DNSName: !GetAtt WebsiteDistribution.DomainName
            EvaluateTargetHealth: false
            # The following HosteZoneId is always used for alias records pointing to CF.
            HostedZoneId: Z2FDTNDATAQYW2
        - Name: !Ref DomainName
          Type: AAAA
          AliasTarget:
            DNSName: !GetAtt WebsiteDistribution.DomainName
            EvaluateTargetHealth: false
            # The following HosteZoneId is always used for alias records pointing to CF.
            HostedZoneId: Z2FDTNDATAQYW2


Outputs:
  BucketName:
    Value: !Ref WebsiteBucket

  DistributionID:
    Value: !Ref WebsiteDistribution

  DistributionDomainName:
    Value: !GetAtt WebsiteDistribution.DomainName
